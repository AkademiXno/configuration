---
#
# edX Configuration
#
# github:     https://github.com/edx/configuration
# wiki:       https://github.com/edx/configuration/wiki
# code style: https://github.com/edx/configuration/wiki/Ansible-Coding-Conventions
# license:    https://github.com/edx/configuration/blob/master/LICENSE.TXT
#
#
#
# Tasks for role go-server
#
# Overview:
#
# Deploys go-server using aptitude!
#
# Dependencies:
#    - openjdk7
#
# Example play:
#
# - name: Configure instance(s)
#   hosts: go-server
#   sudo: True
#   vars_files:
#     - "{{ secure_dir }}/admin/sandbox.yml"
#   gather_facts: True
#   roles:
#     - common
#

- name: install go-server aptitude repository
  apt_repository:
    repo: "{{ GO_SERVER_APT_SOURCE }}"

- name: install aptitude key for go-server/go-server
  apt_key:
    url: "{{ GO_SERVER_APT_KEY_URL }}"

- name: install go-server using apt-get
  apt:
    name: "{{ GO_SERVER_APT_NAME }}={{ GO_SERVER_VERSION }}"
    update_cache: yes

- name: create go-server plugin directory
  file:
    path: "{{ GO_SERVER_OAUTH_LOGIN_JAR_DESTINATION }}"
    state: directory
    mode: 0776
    owner: "{{ GO_SERVER_USER }}"
    group: "{{ GO_SERVER_GROUP }}"

- name: install go-server oauth plugin
  get_url:
    url: "{{ GO_SERVER_OAUTH_LOGIN_JAR_URL }}"
    dest: "{{ GO_SERVER_OAUTH_LOGIN_JAR_DESTINATION }}"
    mode: 0776
    owner: "{{ GO_SERVER_USER }}"
    group: "{{ GO_SERVER_GROUP }}"

- name: setup password file if secret hash exists
  template:
    src: edx/app/go-server/password.txt.j2
    dest: "{{ GO_SERVER_CONF_HOME }}/{{ GO_SERVER_PASSWORD_FILE_NAME }}"
    mode: 0600
    owner: "{{ GO_SERVER_USER }}"
    group: "{{ GO_SERVER_GROUP }}"
  when: GO_SERVER_ADMIN_PASSWORD_HASH is defined

- name: install go-server configuration
  template:
    src: edx/app/go-server/cruise-config.xml.j2
    dest: "{{ GO_SERVER_CONF_HOME }}/cruise-config.xml"
    mode: 0600
    owner: "{{ GO_SERVER_USER }}"
    group: "{{ GO_SERVER_GROUP }}"

- name: stop go-server
  service:
    name: "{{ GO_SERVER_SERVICE_NAME }}"
    state: stopped

- name: create the temp directory
  file:
    path: "{{ GOCD_TEMP_RESTORE_DIRECTORY }}"
    state: directory
    mode: 0776
    owner: "{{ GO_SERVER_USER }}"
    group: "{{ GO_SERVER_GROUP }}"

- name: copy go-server backup from backup storage
  unarchive:
    src: go-server-latest-backup.zip
    dest: "{{ GOCD_TEMP_RESTORE_DIRECTORY }}/"
    mode: 0755
    owner: "{{ GO_SERVER_USER }}"
    group: "{{ GO_SERVER_GROUP }}"

- name: check if H2 db exists
  stat: "path={{ GO_SERVER_H2DB_LOCATION }}"
  register: h2db_stat

- name: create the db backup directory
  file:
    path: "{{ GO_SERVER_H2DB_BACKUP_LOCATION }}"
    state: directory
    mode: 0776
    owner: "{{ GO_SERVER_USER }}"
    group: "{{ GO_SERVER_GROUP }}"

- name: back up existing H2 db if needed
  command: "mv {{ GO_SERVER_H2DB_LOCATION }} {{ GO_SERVER_H2DB_BACKUP_LOCATION }}"
  when: h2db_stat.stat.exists

- name: delete the db directory to clear out
  file:
    path: "{{ GO_SERVER_HOME }}/{{ GO_SERVER_H2DB_PATH }}"
    state: absent
  when: h2db_stat.stat.exists

- name: re-create the db backup directory
  file:
    path: "{{ GO_SERVER_HOME }}/{{ GO_SERVER_H2DB_PATH }}"
    state: directory
    mode: 0776
    owner: "{{ GO_SERVER_USER }}"
    group: "{{ GO_SERVER_GROUP }}"

- name: move the backup contents to the correct location
  shell: "cp {{ GOCD_TEMP_RESTORE_DIRECTORY }}/backup*/* {{ GOCD_TEMP_RESTORE_DIRECTORY }}/"

- name: unzip the db backup
  unarchive:
    copy: no
    src: "{{ GOCD_TEMP_RESTORE_DIRECTORY }}/db.zip"
    dest: "{{ GOCD_TEMP_RESTORE_DIRECTORY }}"
    mode: 0600
    owner: "{{ GO_SERVER_USER }}"
    group: "{{ GO_SERVER_GROUP }}"

- name: copy backup db file into GoCD db directory
  command: "mv {{ GOCD_TEMP_RESTORE_DIRECTORY }}/{{ GO_SERVER_H2DB_NAME }} {{ GO_SERVER_H2DB_LOCATION }}"

- name: unzip config-dir.zip in backup directory
  unarchive:
    copy: no
    src: "{{ GOCD_TEMP_RESTORE_DIRECTORY }}/config-dir.zip"
    dest: "{{ GO_SERVER_CONF_HOME }}"
    mode: 0600
    owner: "{{ GO_SERVER_USER }}"
    group: "{{ GO_SERVER_GROUP }}"

- name: create the config directory
  file:
    path: "{{ GO_SERVER_CONF_HOME }}db/config.git/"
    state: directory
    mode: 0776
    owner: "{{ GO_SERVER_USER }}"
    group: "{{ GO_SERVER_GROUP }}"

- name: unzip config-repo.zip into backup directory
  unarchive:
    copy: no
    src: "{{ GOCD_TEMP_RESTORE_DIRECTORY }}/config-repo.zip"
    dest: "{{ GO_SERVER_CONF_HOME }}db/config.git/"
    mode: 0600
    owner: "{{ GO_SERVER_USER }}"
    group: "{{ GO_SERVER_GROUP }}"

- name: fix the permissions in config directory
  shell: find /etc/go -type d -exec chmod 775 {} \;

- name: remove the temp directory
  file:
    path: "{{ GOCD_TEMP_RESTORE_DIRECTORY }}"
    state: absent

- name: restart go-server
  service:
    name: "{{ GO_SERVER_SERVICE_NAME }}"
    state: restarted

